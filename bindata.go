// Code generated by go-bindata.
// sources:
// data/boot.6102
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBoot6102 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x6b\x6c\x1c\x47\x1d\xff\xcd\xee\xc4\x9e\x3d\x9f\xf1\x9c\x7b\x4e\x2e\xb6\x25\x8f\xcf\x3b\xf6\x5d\xdc\xa2\x33\xb2\x8b\x85\x46\xca\xf8\x51\xe4\x84\x82\x5c\xda\xaa\x16\x2d\xd2\xb5\x14\xe1\x12\x21\xb9\x12\x1f\xa2\x7e\x68\x36\x57\xab\xb8\x34\x97\xb5\x04\x9f\x22\x3e\xb8\xf8\xfa\x4a\x7d\x5e\xb7\xcd\xab\x80\x9b\x53\xa9\x90\x11\x12\x72\x81\x4a\xa1\x85\xca\xca\x27\xf3\x12\x07\x12\x52\xe9\x23\x8b\x66\xef\xce\x4e\xea\x54\x42\x7c\x60\x75\xeb\xf9\x3f\x7e\xf3\x7f\xcf\x78\xb5\x37\x0b\xed\x4d\x41\x7b\x33\x50\xac\x34\x27\x19\x50\x74\x10\xef\x10\xf8\x1b\x00\x0c\xac\x87\xdb\xc1\xab\x40\x70\x0e\x34\x38\x0f\x16\x5c\x40\x3c\xb8\x08\xde\xc0\xaa\xd8\xf2\xfb\xaa\x65\xb9\xaa\xe2\xa5\x9c\x3c\x05\x0c\x3b\xd0\x65\x07\xd4\x4d\xf4\x68\xb3\x3f\x3d\x14\x86\xfb\x45\xf8\xb1\xa1\xcb\x00\x1b\x76\x90\x2c\x3b\x88\x97\x01\xb8\x09\xd0\x4f\x62\x86\x1d\x7c\xa6\xec\x44\x3a\x51\x97\x5f\x1b\x76\x48\x5b\xf9\x29\x40\x39\x29\x36\x92\xcd\x8c\x96\x8f\x80\x95\x35\x92\xca\xf1\x50\x3e\x62\x6c\xcc\x4a\x60\x4e\xaa\xb6\xe5\x2a\x50\x91\xea\xe0\x72\x55\xed\x5f\x02\x70\x49\xaa\xa6\xe5\xaa\x6a\x36\xf4\xa2\x54\xc9\x25\x93\xcf\x25\x7b\xa9\x2a\x15\x2f\xe5\x4e\x73\x50\x95\x20\xa4\x7f\x88\x90\xfd\x09\xec\x33\xfe\x5d\x6e\x61\xe4\x51\x0d\x0e\xd8\x35\x9e\x62\xe4\x51\x0f\xab\x9f\x05\x95\xff\x42\xbc\x15\xe4\x3d\x23\xe7\x1a\xa3\x66\x0d\x7e\x0c\xb8\x8e\x80\x89\xaf\xf8\x17\x40\xb1\x6a\x48\x66\x67\xdc\xe0\x25\xd0\xbe\x75\x30\xd7\xe1\x91\x4e\xb1\xb5\x83\x1d\xb3\x88\x9b\x3d\x8a\x31\xd8\xac\x22\xec\xdc\x46\xf4\x2a\x06\x61\x6d\xac\x09\x6b\x61\x49\xa0\x7d\x51\xa7\xbf\x0a\xd2\xf0\xaf\x18\xb8\x91\xbb\x4c\xa0\xbc\x00\x14\xff\x04\xb7\xf8\x01\xe0\x32\x1e\xf1\x43\xd9\x30\x74\xd9\x3e\x74\x64\xe0\x44\xf8\x2e\x02\xfb\xfe\x4d\xf7\x80\xae\xe5\xa3\x18\xef\x1e\x61\x31\x5a\xde\x46\xca\xd8\x54\x8c\xc5\x47\x58\x7b\xc4\x9b\x38\xc8\xc6\x9c\x20\xd5\xe3\xd1\x2b\xcb\x20\xb7\xbd\x00\xd6\x81\xf0\xcd\xda\xde\x37\x51\x9e\x42\x5c\x31\xcf\xac\xd4\xae\x6c\x4b\x20\x25\xfd\x17\x41\x15\x5b\x73\x3a\x32\xd8\x6f\x70\xab\xa3\xa0\x03\x23\x88\xfb\x25\x20\xca\x79\x1f\x48\x2b\xac\x45\xa3\x3b\xbd\x11\xe5\xc0\xc8\x7e\x2d\x8a\xce\x5e\x5e\x31\x1a\xc5\x50\xaf\x03\x37\x75\xe0\x40\xef\xea\xe7\x41\xdd\xb7\x6f\x6e\xf3\xd4\x76\xdd\x46\x73\xc3\x06\xf8\x75\x74\xaa\x41\xff\xb7\x38\x53\x07\x6b\xfb\x92\xc0\x66\x2e\x7a\x4d\x3f\xb0\x3d\x2a\xdc\x6f\x80\xe0\x3b\xfa\x50\x07\xc2\x9f\x47\xf5\x88\x95\xe6\xd0\xfe\xc3\x8a\x72\xd0\x34\x92\xbd\x7d\x98\x7c\x6e\x4a\x96\x8f\x80\x17\x8f\x98\xf3\xb0\x84\x11\x66\x43\x39\x6d\xe1\x48\x36\x0c\xad\x5f\xae\xb9\xe5\xfd\x48\x99\x9a\x0d\xac\x63\xca\x7f\x15\xf0\xcf\x81\xfa\xe7\xc1\xfc\x0b\x88\xfb\x17\xc1\x07\xd6\x4d\x0f\x3c\x98\x73\x24\x1d\x0d\x99\x0d\xb7\xb4\xb7\x05\xed\x6d\x63\x9d\x01\xc4\x61\x83\x49\x11\x7e\x2c\x19\xc4\x2e\x4e\x18\x5c\x75\xdd\xb9\x41\xcf\x39\x70\x4b\xad\x67\xff\xa3\x3d\x72\xa3\x3d\x15\x2b\x41\x1e\x05\x54\x4b\x58\x55\x0e\x38\xf9\xd2\xb4\xab\x58\xc9\x60\x43\xd5\x52\x82\x64\xb4\x22\x8f\x35\x7f\x97\x38\xda\x25\x8f\xcc\xb8\xca\x59\x02\x89\x69\x49\xbe\x3d\x23\x65\x16\x28\xb6\xc2\xd8\xa7\xa4\x85\x0d\xca\x2c\x68\x52\x84\x1f\x96\x6f\x0b\x3f\x52\x71\x0f\xe6\x9e\x20\x1e\x58\x14\x6f\xcb\x1a\x8a\x8f\x80\xa9\x58\x4f\x38\x72\x34\x0c\x15\x29\xe5\xc9\xa1\x29\x77\x25\x6b\x72\x29\xe5\x8b\x0c\x7c\x88\xc1\xba\x17\xe1\xc7\x86\x37\x73\x4f\x5a\xb4\x20\x31\xed\x1a\xec\x4a\x06\x54\xc5\xc0\x65\x7d\xef\xca\xa1\xda\x19\xfb\x7f\x3e\xaa\xa5\x94\x2f\x1e\x03\x1f\x3a\x06\xd2\x91\x0f\xb7\x76\xf2\x7a\x18\xcc\xaa\x64\xa4\x22\x5f\x9f\x19\xee\x7d\xfa\x9b\x78\x06\x07\x07\xd6\xc3\xad\xe0\x32\xba\x83\x35\x24\x55\x8f\xb9\x66\x52\x12\xd0\x12\xde\x94\x74\x5b\x21\x00\xde\xee\x8e\x83\x40\x8f\x4a\xe8\x69\x09\x3d\x23\xa1\x3d\x09\x9d\x93\xd0\x79\x59\x4c\x03\xb8\x9a\xea\xc5\xb7\xd8\x20\x17\xb0\x90\xcf\x48\x79\x14\x24\x37\x81\x1e\xb2\x7c\xbc\x8f\x5c\xad\x34\xe1\xa1\x39\x4a\xae\x08\x89\x37\xd8\x20\x96\x46\x25\x79\x68\xa6\x9f\x0b\x50\x8b\x7a\xbd\xb8\xba\xd1\xcf\x01\xcb\xee\xcf\xf5\xe3\xcd\x5c\xbf\xe9\x11\xa6\x8f\xf7\x9b\x1e\x75\xf4\x84\xdb\xe4\xaf\xf9\x5e\xfc\x79\xae\x9f\xfc\x6a\xb4\xdf\x6a\xaa\xf4\xdb\x71\xaf\x3f\xca\x65\x16\x3c\xb9\x8d\x26\x93\x5b\x71\x16\xc9\xfd\xac\x76\x3f\xd1\x44\x63\x0d\xc3\x28\x6f\xa7\xc4\x8a\x59\xc0\x5f\x43\xd2\xbf\x8c\xee\x84\x40\xd3\xc0\x3a\x84\x1b\xc3\x98\x22\x25\xba\x72\x08\x5c\x91\x12\x5b\x11\xa6\x46\x38\x3b\x72\xec\xec\x6a\x24\x1f\x8c\xe4\x39\x97\xed\xbb\x77\x25\x83\xb8\x22\x25\x6f\x45\x20\xa5\x48\x69\x7a\x45\x44\x7c\xce\x75\x18\xcc\x5c\xb8\x0e\x2c\xd3\xeb\xc6\x99\x5b\xc9\x82\x97\x0f\x20\x59\xee\x40\xbc\x7c\x0b\x68\x7b\x1e\xb4\x9c\x34\xb1\x3c\x17\xdd\xe3\x66\x1e\x95\xb3\x06\xb3\x96\x1d\xb0\x68\x8e\x19\xd0\xeb\xf0\x68\x46\x3b\x9c\xf0\x5a\x19\xe1\x47\x35\x39\xdf\x2b\xaf\xcf\x28\x11\xb5\x99\x45\xed\xff\x62\x3e\x58\x83\x0e\x5e\xc6\x24\xb0\x20\x01\x4f\x9a\xff\x05\xc1\x32\x68\x50\x02\x0b\x9e\x45\x3c\x78\x0e\x3c\x78\x1e\xc9\xe0\x05\xa4\x82\x17\xd1\x1d\x9c\x85\x08\x5e\x82\x1b\xac\x20\x13\x94\x71\x6b\xb0\x8a\x5c\x10\x60\x38\xb8\x84\xd1\xe0\x35\xa8\xe0\x15\x4c\x05\xaf\xe2\xce\xe0\x1c\xa6\x83\xf3\xb8\x27\xb8\x80\x99\xe0\x22\x1e\x08\x5e\x47\x3e\xb8\x8c\x87\x5b\x61\x09\xe3\xbb\x9f\x83\x1c\x72\x40\x3b\x44\xf8\xa1\x95\x5e\xe8\x45\x42\x14\xcc\xdd\x68\xee\x48\xff\x32\x1e\x46\x82\x17\xfc\x97\x31\xe9\x2f\x83\xfa\x25\x30\xff\x59\xc4\xfd\xe7\xc0\xfd\xe7\x91\xf4\x5f\x40\xca\x7f\x11\xdd\xfe\x59\x08\xff\x25\xb8\xfe\x0a\x32\x7e\x19\xb7\xfa\xab\xc8\xf9\x01\x86\xfd\x4b\x18\xf5\x5f\x83\xf2\xd7\xa0\xfd\x57\xa2\x7b\xeb\x4e\xff\x1c\xa6\xfd\xf3\xb8\xc7\xbf\x80\x19\xff\x22\x1e\xf0\x5f\x47\xde\xde\x02\x1b\x58\xc7\x52\x63\x9e\x81\x29\x09\xcc\x48\x20\x2f\xb3\x67\xa0\xef\xd6\x48\x01\x5c\xb6\xc2\x9a\x20\x9e\x90\x33\x1a\x2c\xfb\x05\x4c\xe3\xc8\x66\x9f\x7d\x27\x0e\x42\x1b\xfc\x66\x3b\x79\x6c\xa6\xd7\xe4\x64\x74\x07\x74\xf8\x0f\x79\x0a\x04\x2d\xc2\xc3\xd3\xa2\x0f\x74\x67\xd5\xad\xb0\xf2\xee\xfc\x47\x8b\xa6\x9f\x7e\xe4\x8f\x4b\xb3\x9a\xd9\x32\xb1\xd4\x7b\x72\x25\xa8\xeb\xea\xf5\xb0\x80\xaa\x74\x3b\xc3\x70\xf5\x0c\xe8\xe9\x27\x40\x57\xcf\x00\xe6\x05\xb6\x24\xec\x6e\x2b\xf7\x18\xc8\xdd\x1a\xf6\xc0\x8f\x40\xcc\xb9\x33\xeb\xe0\x19\xb0\x03\x3a\xfc\x37\xec\xd4\xf8\xc0\x7b\x20\x83\xef\x20\x76\x9f\x0e\xff\x6e\xec\xd4\x7d\x66\x3e\xe9\x33\x28\x41\x2c\x2f\x61\x20\x3a\xcb\x98\x96\xc3\xad\x1b\x30\xdf\x24\xd9\x77\xa0\xef\xd3\xa0\xa4\x22\x24\x47\x74\xbe\xa5\xa1\x1b\xfd\x6a\x85\x75\x6e\xa0\x84\x81\xc6\xfa\x83\x9f\x60\xc0\xed\xb2\x85\x5f\x82\xb0\xef\xc7\x41\x40\xb7\x13\xba\xd9\xd7\x3c\x01\xdb\xfe\xf2\x95\x43\x58\xd8\xec\x33\xeb\xdd\xf9\xa8\xb7\xc2\xd6\xb3\x92\x54\xa6\xa5\xa1\x09\x8d\xe4\x4d\xe4\x2b\xbc\x57\xfe\x1a\x24\xfb\x2e\xc6\xee\xcb\x87\x5b\x26\x06\x23\x83\xc5\xc7\x6f\x16\x7f\x6e\x1e\xa1\xdb\x05\x32\x3a\x8f\xc3\x26\x97\xe4\x4f\x61\xab\xb6\x2f\x42\x75\x7a\x20\x1f\x1c\x97\xb9\x33\x20\xe8\x7c\xcb\xab\xd3\x16\x3a\x7f\xab\xeb\x34\x45\xe7\xdb\x0d\x0c\x43\xe7\x5b\x0d\x9a\xa3\xf3\x37\x95\x3a\x2d\xd0\xf9\xbb\x68\xaf\xf1\x61\x6c\xaf\x06\x80\xea\x2c\xe5\x02\x0d\x7c\x5a\x3d\xdd\x4e\x01\xd5\x55\xca\x05\x8f\x19\x69\x55\x9e\x7e\x1d\x70\x3b\x39\x0c\xef\x76\x41\xdb\x8f\x5f\x71\xd1\xf5\xfb\x02\xb0\x29\xed\xfb\x37\xa5\xdb\xa5\x51\x93\xbd\x3b\x6e\x78\xb5\x83\xf9\xa3\x55\xd3\xc3\xab\xef\x89\xf8\xe1\x2e\xaf\x8e\x7f\xe7\x8d\x3a\xbe\xae\xff\x43\xc1\xf0\x4b\x67\xf6\xc6\x66\x1e\x0b\x9c\xe8\x18\x16\xa8\x4e\x5b\x8c\x8f\x85\x8c\xe9\x49\x22\xd8\x09\x8b\x72\xee\xcd\x53\x31\x76\x8d\x31\x9d\x26\x9c\x79\x93\xf4\x70\xa5\x19\xbf\x60\xcc\x73\x89\xb6\xc0\xe1\x59\x58\xa4\x7a\xec\x94\xed\x3d\x6e\xc5\x39\xf7\x26\x2d\xe1\x60\xca\xd2\xed\x06\x3d\x9f\x3a\x8c\x13\x57\x0d\x8a\x42\x90\x90\xa1\xb6\x85\xe2\x70\xf5\xa6\x62\x81\x1b\x6c\x3f\xf1\x4f\x63\xfb\xc1\xa2\xbd\xa0\xdb\xb1\x48\x3d\x97\x08\x27\xdc\xb0\x76\x18\xd6\xdc\xb0\x81\xeb\x6c\xd8\xde\x2e\x6d\x14\xe3\x16\xe7\x5e\x81\xb5\x79\x3a\x6d\x71\x51\xa0\x22\x4d\x44\xcc\x7b\xc8\x62\x5c\x78\xf3\x96\x60\x37\x80\x77\x03\xf4\xe2\x98\x6b\xd6\x5f\xb3\x36\xfa\xc7\x86\x12\x0b\xa7\x32\x0f\x4e\xd0\x94\xa8\x50\xdd\x47\x92\x6c\x69\xb2\x90\x4e\xf0\x85\xc9\xf1\xb4\xc3\x33\x27\x27\x9b\x04\x6f\x23\x4f\x72\xe6\x4d\x99\x2a\x4e\x5b\x5e\x12\x8b\xcc\x9b\x88\x37\x7b\x27\x0a\x96\x29\x9a\x25\x12\xa4\xad\xba\x9b\xe5\x27\xd0\x7c\x71\xea\xe4\x44\xbc\x79\x71\x07\xdd\x7b\x8d\x09\x5d\x88\x8a\x6f\x09\xde\x73\x32\x12\x83\x63\x0e\x73\xd0\xa6\xb0\xe3\xb4\xad\x72\xa2\x7a\x93\xe4\x09\xea\x7d\xb2\x44\x22\xea\x27\x61\x5c\x9f\x64\xcd\x9e\x6e\xc7\x02\xd3\xe3\x16\x13\x63\x91\xde\xf8\x16\x04\x85\x38\xcf\x17\xbe\xef\xde\x95\x7e\x2a\x79\x47\x32\xf3\xcc\x1d\xb1\x8c\x38\x49\x99\xd0\x09\x42\xb9\xf0\x16\x2c\x8f\x41\xef\xc3\x24\xe5\xa2\x60\x4a\x95\x20\x8c\x09\x6f\x81\xea\xe4\xf5\x2e\x4f\x6c\x11\x70\x13\x86\x57\xfb\x51\x68\x53\xc1\x36\xaf\xc0\x8c\xcb\xda\x0c\xf5\x12\xc6\xf4\x18\x6d\xae\x58\xc8\x59\x37\x89\xbb\x0d\xf3\x8c\x6b\x43\x5b\xbb\xbf\x9e\xad\x1d\xb1\xee\x06\x87\xb6\xea\xe9\x10\xa4\x50\x89\x99\x39\x98\xa4\xa2\xd7\x62\x3d\xef\x47\x96\x7a\x4e\xd6\x8c\x1e\xf0\xde\xa0\x6c\x17\x5d\x33\x52\x00\xc7\xcf\x9a\xb8\x18\x6b\x88\x0f\x57\x2c\xe3\x39\x8a\xc0\x44\x52\x8f\xa8\x8e\xa6\x4c\x2b\xeb\x3a\x74\x43\xcc\xc5\x04\xd9\xde\xb5\xbd\x67\x7a\x00\xc3\x5c\x69\xaa\xb4\x13\xb1\xe7\xab\x8a\x46\xed\xf9\x5e\x58\x5b\x9f\x08\xe7\x6b\xed\xaa\x34\x19\xef\x37\x7d\xbc\xc9\x31\x77\x9f\xee\x86\x6e\xc6\x3d\x74\x71\x52\xd7\x6d\xd6\x5d\xb6\x5d\xdb\x19\xaa\x3d\x4f\x8e\x98\xbc\xae\x97\xb4\x5d\xfb\xf4\xef\xbd\x1c\xf1\xea\x94\xa6\x7b\x7e\x35\x45\x1c\xf9\x06\x9a\x78\x37\x7c\x90\x1e\x7e\xdf\xfc\xb5\xc3\xba\x89\xe6\x68\x62\x6a\x73\x70\x5d\x4d\xea\x87\x7b\x68\xfc\x68\xfa\xae\xf4\x53\xe9\xdb\xb9\xa5\x7b\x9f\xb4\x2b\x7b\x63\xf9\x4f\x00\x00\x00\xff\xff\xb5\x6c\xbb\x90\xc0\x0f\x00\x00")

func dataBoot6102Bytes() ([]byte, error) {
	return bindataRead(
		_dataBoot6102,
		"data/boot.6102",
	)
}

func dataBoot6102() (*asset, error) {
	bytes, err := dataBoot6102Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/boot.6102", size: 4032, mode: os.FileMode(420), modTime: time.Unix(1521397995, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/boot.6102": dataBoot6102,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"boot.6102": &bintree{dataBoot6102, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
